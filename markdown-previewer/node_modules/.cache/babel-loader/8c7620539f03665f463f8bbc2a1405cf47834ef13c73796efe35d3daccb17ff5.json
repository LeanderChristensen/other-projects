{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/leander/Documents/projects/markdown-previewer/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classPrivateMethodInitSpec from \"/Users/leander/Documents/projects/markdown-previewer/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateMethodGet from \"/Users/leander/Documents/projects/markdown-previewer/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _defineProperty from \"/Users/leander/Documents/projects/markdown-previewer/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/leander/Documents/projects/markdown-previewer/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/leander/Documents/projects/markdown-previewer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/leander/Documents/projects/markdown-previewer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"/Users/leander/Documents/projects/markdown-previewer/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * marked v5.1.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\nvar defaults = getDefaults();\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nvar escapeTest = /[&<>\"']/;\nvar escapeReplace = new RegExp(escapeTest.source, 'g');\nvar escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nvar escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nvar escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nvar getEscapeReplacement = function getEscapeReplacement(ch) {\n  return escapeReplacements[ch];\n};\nfunction _escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nvar unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, function (_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\nvar caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  var obj = {\n    replace: function replace(name, val) {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: function getRegex() {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\nvar nonWordAndColonTest = /[^\\w:]/g;\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    var prot;\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nvar baseUrls = {};\nvar justDomain = /^[^:]+:\\/*[^/]*$/;\nvar protocol = /^([^:]+:)[\\s\\S]*$/;\nvar domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  var relativeBase = base.indexOf(':') === -1;\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar noopTest = {\n  exec: function noopTest() {}\n};\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n      var escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  var i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  var l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    var currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var l = str.length;\n  var level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\nfunction outputLink(cap, link, raw, lexer) {\n  var href = link.href;\n  var title = link.title ? _escape(link.title) : null;\n  var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    var token = {\n      type: 'link',\n      raw: raw,\n      href: href,\n      title: title,\n      text: text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw: raw,\n    href: href,\n    title: title,\n    text: _escape(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  var indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(function (node) {\n    var matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    var _matchIndentInNode = _slicedToArray(matchIndentInNode, 1),\n      indentInNode = _matchIndentInNode[0];\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n\n/**\n * Tokenizer\n */\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(options) {\n    _classCallCheck(this, Tokenizer);\n    this.options = options || defaults;\n  }\n  _createClass(Tokenizer, [{\n    key: \"space\",\n    value: function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n      if (cap && cap[0].length > 0) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"code\",\n    value: function code(src) {\n      var cap = this.rules.block.code.exec(src);\n      if (cap) {\n        var text = cap[0].replace(/^ {1,4}/gm, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    }\n  }, {\n    key: \"fences\",\n    value: function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || '');\n        return {\n          type: 'code',\n          raw: raw,\n          lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        var text = cap[2].trim();\n\n        // remove trailing #s\n        if (/#$/.test(text)) {\n          var trimmed = rtrim(text, '#');\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || / $/.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        var text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n        var top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        var tokens = this.lexer.blockTokens(text);\n        this.lexer.state.top = top;\n        return {\n          type: 'blockquote',\n          raw: cap[0],\n          tokens: tokens,\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"list\",\n    value: function list(src) {\n      var cap = this.rules.block.list.exec(src);\n      if (cap) {\n        var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n        var bull = cap[1].trim();\n        var isordered = bull.length > 1;\n        var list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? \"\\\\d{1,9}\\\\\".concat(bull.slice(-1)) : \"\\\\\".concat(bull);\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        }\n\n        // Get next list item\n        var itemRegex = new RegExp(\"^( {0,3}\".concat(bull, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\"));\n\n        // Check if current bullet point can start a new List Item\n        while (src) {\n          endEarly = false;\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n          if (this.rules.block.hr.test(src)) {\n            // End list if bullet was actually HR (possibly move into itemRegex?)\n            break;\n          }\n          raw = cap[0];\n          src = src.substring(raw.length);\n          line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, function (t) {\n            return ' '.repeat(3 * t.length);\n          });\n          nextLine = src.split('\\n', 1)[0];\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimLeft();\n          } else {\n            indent = cap[2].search(/[^ ]/); // Find first non-space char\n            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n          blankLine = false;\n          if (!line && /^ *$/.test(nextLine)) {\n            // Items begin with at most one blank line\n            raw += nextLine + '\\n';\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n          if (!endEarly) {\n            var nextBulletRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\"));\n            var hrRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"));\n            var fencesBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:```|~~~)\"));\n            var headingBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}#\"));\n\n            // Check if following lines should be included in List Item\n            while (src) {\n              rawLine = src.split('\\n', 1)[0];\n              nextLine = rawLine;\n\n              // Re-align to follow commonmark nesting rules\n              if (this.options.pedantic) {\n                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n              }\n\n              // End list item if found code fences\n              if (fencesBeginRegex.test(nextLine)) {\n                break;\n              }\n\n              // End list item if found start of new heading\n              if (headingBeginRegex.test(nextLine)) {\n                break;\n              }\n\n              // End list item if found start of new bullet\n              if (nextBulletRegex.test(nextLine)) {\n                break;\n              }\n\n              // Horizontal rule found\n              if (hrRegex.test(src)) {\n                break;\n              }\n              if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n                // Dedent if possible\n                itemContents += '\\n' + nextLine.slice(indent);\n              } else {\n                // not enough indentation\n                if (blankLine) {\n                  break;\n                }\n\n                // paragraph continuation unless last line was a different block level element\n                if (line.search(/[^ ]/) >= 4) {\n                  // indented code block\n                  break;\n                }\n                if (fencesBeginRegex.test(line)) {\n                  break;\n                }\n                if (headingBeginRegex.test(line)) {\n                  break;\n                }\n                if (hrRegex.test(line)) {\n                  break;\n                }\n                itemContents += '\\n' + nextLine;\n              }\n              if (!blankLine && !nextLine.trim()) {\n                // Check if current line is blank\n                blankLine = true;\n              }\n              raw += rawLine + '\\n';\n              src = src.substring(rawLine.length + 1);\n              line = nextLine.slice(indent);\n            }\n          }\n          if (!list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              list.loose = true;\n            } else if (/\\n *\\n *$/.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          }\n\n          // Check for task list items\n          if (this.options.gfm) {\n            istask = /^\\[[ xX]\\] /.exec(itemContents);\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n            }\n          }\n          list.items.push({\n            type: 'list_item',\n            raw: raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents\n          });\n          list.raw += raw;\n        }\n\n        // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n        list.items[list.items.length - 1].raw = raw.trimRight();\n        list.items[list.items.length - 1].text = itemContents.trimRight();\n        list.raw = list.raw.trimRight();\n        var l = list.items.length;\n\n        // Item child tokens handled here at end because we needed to have the final item to trim it first\n        for (i = 0; i < l; i++) {\n          this.lexer.state.top = false;\n          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n          if (!list.loose) {\n            // Check if list should be loose\n            var spacers = list.items[i].tokens.filter(function (t) {\n              return t.type === 'space';\n            });\n            var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function (t) {\n              return /\\n.*\\n/.test(t.raw);\n            });\n            list.loose = hasMultipleLineBreaks;\n          }\n        }\n\n        // Set all items to loose if list is loose\n        if (list.loose) {\n          for (i = 0; i < l; i++) {\n            list.items[i].loose = true;\n          }\n        }\n        return list;\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html(src) {\n      var cap = this.rules.block.html.exec(src);\n      if (cap) {\n        var token = {\n          type: 'html',\n          block: true,\n          raw: cap[0],\n          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n          text: cap[0]\n        };\n        if (this.options.sanitize) {\n          var text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]);\n          token.type = 'paragraph';\n          token.text = text;\n          token.tokens = this.lexer.inline(text);\n        }\n        return token;\n      }\n    }\n  }, {\n    key: \"def\",\n    value: function def(src) {\n      var cap = this.rules.block.def.exec(src);\n      if (cap) {\n        var tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n        var href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n        var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n        return {\n          type: 'def',\n          tag: tag,\n          raw: cap[0],\n          href: href,\n          title: title\n        };\n      }\n    }\n  }, {\n    key: \"table\",\n    value: function table(src) {\n      var cap = this.rules.block.table.exec(src);\n      if (cap) {\n        var item = {\n          type: 'table',\n          header: splitCells(cap[1]).map(function (c) {\n            return {\n              text: c\n            };\n          }),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n        };\n        if (item.header.length === item.align.length) {\n          item.raw = cap[0];\n          var l = item.align.length;\n          var i, j, k, row;\n          for (i = 0; i < l; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n          l = item.rows.length;\n          for (i = 0; i < l; i++) {\n            item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) {\n              return {\n                text: c\n              };\n            });\n          }\n\n          // parse child tokens inside headers and cells\n\n          // header child tokens\n          l = item.header.length;\n          for (j = 0; j < l; j++) {\n            item.header[j].tokens = this.lexer.inline(item.header[j].text);\n          }\n\n          // cell child tokens\n          l = item.rows.length;\n          for (j = 0; j < l; j++) {\n            row = item.rows[j];\n            for (k = 0; k < row.length; k++) {\n              row[k].tokens = this.lexer.inline(row[k].text);\n            }\n          }\n          return item;\n        }\n      }\n    }\n  }, {\n    key: \"lheading\",\n    value: function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: this.lexer.inline(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        var text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n        return {\n          type: 'paragraph',\n          raw: cap[0],\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"text\",\n    value: function text(src) {\n      var cap = this.rules.block.text.exec(src);\n      if (cap) {\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: this.lexer.inline(cap[0])\n        };\n      }\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: _escape(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"tag\",\n    value: function tag(src) {\n      var cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n        return {\n          type: this.options.sanitize ? 'text' : 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          block: false,\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"link\",\n    value: function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        var trimmedUrl = cap[2].trim();\n        if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!/>$/.test(trimmedUrl)) {\n            return;\n          }\n\n          // ending angle bracket cannot be escaped\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          var lastParenIndex = findClosingBracket(cap[2], '()');\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n        var href = cap[2];\n        var title = '';\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n          if (link) {\n            href = link[1];\n            title = link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim();\n        if (/^</.test(href)) {\n          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n          title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n        }, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"reflink\",\n    value: function reflink(src, links) {\n      var cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = links[link.toLowerCase()];\n        if (!link) {\n          var text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text: text\n          };\n        }\n        return outputLink(cap, link, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"emStrong\",\n    value: function emStrong(src, maskedSrc) {\n      var prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var match = this.rules.inline.emStrong.lDelim.exec(src);\n      if (!match) return;\n\n      // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])/)) return;\n      var nextChar = match[1] || match[2] || '';\n      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n        var lLength = match[0].length - 1;\n        var rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n        var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n        endReg.lastIndex = 0;\n\n        // Clip maskedSrc to same section of string as src (move to lexer?)\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n\n          rLength = rDelim.length;\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n          // Remove extra characters. *a*** -> *a*\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n          var raw = src.slice(0, lLength + match.index + rLength + 1);\n\n          // Create `em` if smallest delimiter has odd char count. *a***\n          if (Math.min(lLength, rLength) % 2) {\n            var _text = raw.slice(1, -1);\n            return {\n              type: 'em',\n              raw: raw,\n              text: _text,\n              tokens: this.lexer.inlineTokens(_text)\n            };\n          }\n\n          // Create 'strong' if smallest delimiter has even char count. **a***\n          var text = raw.slice(2, -2);\n          return {\n            type: 'strong',\n            raw: raw,\n            text: text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      }\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        var text = cap[2].replace(/\\n/g, ' ');\n        var hasNonSpaceChars = /[^ ]/.test(text);\n        var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        text = _escape(text, true);\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"br\",\n    value: function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"del\",\n    value: function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2])\n        };\n      }\n    }\n  }, {\n    key: \"autolink\",\n    value: function autolink(src, mangle) {\n      var cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n          href = 'mailto:' + text;\n        } else {\n          text = _escape(cap[1]);\n          href = text;\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"url\",\n    value: function url(src, mangle) {\n      var cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          var prevCapZero;\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n          text = _escape(cap[0]);\n          if (cap[1] === 'www.') {\n            href = 'http://' + cap[0];\n          } else {\n            href = cap[0];\n          }\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"inlineText\",\n    value: function inlineText(src, smartypants) {\n      var cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        var text;\n        if (this.lexer.state.inRawBlock) {\n          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];\n        } else {\n          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n        }\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }]);\n  return Tokenizer;\n}();\n/**\n * Block-Level Grammar\n */\nvar block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.lheading = edit(block.lheading).replace(/bull/g, block.bullet) // lists can interrupt\n.getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = _objectSpread({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = _objectSpread(_objectSpread({}, block.normal), {}, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = _objectSpread(_objectSpread({}, block.normal), {}, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n  },\n\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = edit(inline._escapes, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = _objectSpread({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = _objectSpread(_objectSpread({}, inline.normal), {}, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = _objectSpread(_objectSpread({}, inline.normal), {}, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = _objectSpread(_objectSpread({}, inline.gfm), {}, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n  // em-dashes\n  .replace(/---/g, \"\\u2014\")\n  // en-dashes\n  .replace(/--/g, \"\\u2013\")\n  // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\")\n  // closing singles & apostrophes\n  .replace(/'/g, \"\\u2019\")\n  // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\")\n  // closing doubles\n  .replace(/\"/g, \"\\u201D\")\n  // ellipses\n  .replace(/\\.{3}/g, \"\\u2026\");\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  var out = '',\n    i,\n    ch;\n  var l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n  return out;\n}\n\n/**\n * Block Lexer\n */\nvar Lexer = /*#__PURE__*/function () {\n  function Lexer(options) {\n    _classCallCheck(this, Lexer);\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    var rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  _createClass(Lexer, [{\n    key: \"lex\",\n    value:\n    /**\n     * Preprocessing\n     */\n    function lex(src) {\n      src = src.replace(/\\r\\n|\\r/g, '\\n');\n      this.blockTokens(src, this.tokens);\n      var next;\n      while (next = this.inlineQueue.shift()) {\n        this.inlineTokens(next.src, next.tokens);\n      }\n      return this.tokens;\n    }\n\n    /**\n     * Lexing\n     */\n  }, {\n    key: \"blockTokens\",\n    value: function blockTokens(src) {\n      var _this = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      if (this.options.pedantic) {\n        src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n      } else {\n        src = src.replace(/^( *)(\\t+)/gm, function (_, leading, tabs) {\n          return leading + '    '.repeat(tabs.length);\n        });\n      }\n      var token, lastToken, cutSrc, lastParagraphClipped;\n      var _loop = function _loop() {\n        if (_this.options.extensions && _this.options.extensions.block && _this.options.extensions.block.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          return \"continue\";\n        }\n\n        // newline\n        if (token = _this.tokenizer.space(src)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.length === 1 && tokens.length > 0) {\n            // if there's a single \\n as a spacer, it's terminating the last line,\n            // so move it there so that we don't get unecessary paragraph tags\n            tokens[tokens.length - 1].raw += '\\n';\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n\n        // code\n        if (token = _this.tokenizer.code(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          // An indented code block cannot interrupt a paragraph.\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n\n        // fences\n        if (token = _this.tokenizer.fences(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // heading\n        if (token = _this.tokenizer.heading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // hr\n        if (token = _this.tokenizer.hr(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // blockquote\n        if (token = _this.tokenizer.blockquote(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // list\n        if (token = _this.tokenizer.list(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // html\n        if (token = _this.tokenizer.html(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // def\n        if (token = _this.tokenizer.def(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.raw;\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else if (!_this.tokens.links[token.tag]) {\n            _this.tokens.links[token.tag] = {\n              href: token.href,\n              title: token.title\n            };\n          }\n          return \"continue\";\n        }\n\n        // table (gfm)\n        if (token = _this.tokenizer.table(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // lheading\n        if (token = _this.tokenizer.lheading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // top-level paragraph\n        // prevent paragraph consuming extensions by clipping 'src' to extension start\n        cutSrc = src;\n        if (_this.options.extensions && _this.options.extensions.startBlock) {\n          var startIndex = Infinity;\n          var tempSrc = src.slice(1);\n          var tempStart;\n          _this.options.extensions.startBlock.forEach(function (getStartIndex) {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (_this.state.top && (token = _this.tokenizer.paragraph(cutSrc))) {\n          lastToken = tokens[tokens.length - 1];\n          if (lastParagraphClipped && lastToken.type === 'paragraph') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            _this.inlineQueue.pop();\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          lastParagraphClipped = cutSrc.length !== src.length;\n          src = src.substring(token.raw.length);\n          return \"continue\";\n        }\n\n        // text\n        if (token = _this.tokenizer.text(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            _this.inlineQueue.pop();\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (_this.options.silent) {\n            console.error(errMsg);\n            return \"break\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      };\n      while (src) {\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n        if (_ret === \"break\") break;\n      }\n      this.state.top = true;\n      return tokens;\n    }\n  }, {\n    key: \"inline\",\n    value: function inline(src) {\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.inlineQueue.push({\n        src: src,\n        tokens: tokens\n      });\n      return tokens;\n    }\n\n    /**\n     * Lexing/Compiling\n     */\n  }, {\n    key: \"inlineTokens\",\n    value: function inlineTokens(src) {\n      var _this2 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var token, lastToken, cutSrc;\n\n      // String with links masked to avoid interference with em and strong\n      var maskedSrc = src;\n      var match;\n      var keepPrevChar, prevChar;\n\n      // Mask out reflinks\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      }\n      // Mask out other blocks\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n\n      // Mask out escaped characters\n      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n      }\n      var _loop2 = function _loop2() {\n        if (!keepPrevChar) {\n          prevChar = '';\n        }\n        keepPrevChar = false;\n\n        // extensions\n        if (_this2.options.extensions && _this2.options.extensions.inline && _this2.options.extensions.inline.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this2\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          return \"continue\";\n        }\n\n        // escape\n        if (token = _this2.tokenizer.escape(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // tag\n        if (token = _this2.tokenizer.tag(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n\n        // link\n        if (token = _this2.tokenizer.link(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // reflink, nolink\n        if (token = _this2.tokenizer.reflink(src, _this2.tokens.links)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n\n        // em & strong\n        if (token = _this2.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // code\n        if (token = _this2.tokenizer.codespan(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // br\n        if (token = _this2.tokenizer.br(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // del (gfm)\n        if (token = _this2.tokenizer.del(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // autolink\n        if (token = _this2.tokenizer.autolink(src, mangle)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // url (gfm)\n        if (!_this2.state.inLink && (token = _this2.tokenizer.url(src, mangle))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n\n        // text\n        // prevent inlineText consuming extensions by clipping 'src' to extension start\n        cutSrc = src;\n        if (_this2.options.extensions && _this2.options.extensions.startInline) {\n          var startIndex = Infinity;\n          var tempSrc = src.slice(1);\n          var tempStart;\n          _this2.options.extensions.startInline.forEach(function (getStartIndex) {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (token = _this2.tokenizer.inlineText(cutSrc, smartypants)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.slice(-1) !== '_') {\n            // Track prevChar before string of ____ started\n            prevChar = token.raw.slice(-1);\n          }\n          keepPrevChar = true;\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (_this2.options.silent) {\n            console.error(errMsg);\n            return \"break\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      };\n      while (src) {\n        var _ret2 = _loop2();\n        if (_ret2 === \"continue\") continue;\n        if (_ret2 === \"break\") break;\n      }\n      return tokens;\n    }\n  }], [{\n    key: \"rules\",\n    get: function get() {\n      return {\n        block: block,\n        inline: inline\n      };\n    }\n\n    /**\n     * Static Lex Method\n     */\n  }, {\n    key: \"lex\",\n    value: function lex(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.lex(src);\n    }\n\n    /**\n     * Static Lex Inline Method\n     */\n  }, {\n    key: \"lexInline\",\n    value: function lexInline(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n  }]);\n  return Lexer;\n}();\n/**\n * Renderer\n */\nvar Renderer = /*#__PURE__*/function () {\n  function Renderer(options) {\n    _classCallCheck(this, Renderer);\n    this.options = options || defaults;\n  }\n  _createClass(Renderer, [{\n    key: \"code\",\n    value: function code(_code, infostring, escaped) {\n      var lang = (infostring || '').match(/\\S*/)[0];\n      if (this.options.highlight) {\n        var out = this.options.highlight(_code, lang);\n        if (out != null && out !== _code) {\n          escaped = true;\n          _code = out;\n        }\n      }\n      _code = _code.replace(/\\n$/, '') + '\\n';\n      if (!lang) {\n        return '<pre><code>' + (escaped ? _code : _escape(_code, true)) + '</code></pre>\\n';\n      }\n      return '<pre><code class=\"' + this.options.langPrefix + _escape(lang) + '\">' + (escaped ? _code : _escape(_code, true)) + '</code></pre>\\n';\n    }\n\n    /**\n     * @param {string} quote\n     */\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(quote) {\n      return \"<blockquote>\\n\".concat(quote, \"</blockquote>\\n\");\n    }\n  }, {\n    key: \"html\",\n    value: function html(_html, block) {\n      return _html;\n    }\n\n    /**\n     * @param {string} text\n     * @param {string} level\n     * @param {string} raw\n     * @param {any} slugger\n     */\n  }, {\n    key: \"heading\",\n    value: function heading(text, level, raw, slugger) {\n      if (this.options.headerIds) {\n        var id = this.options.headerPrefix + slugger.slug(raw);\n        return \"<h\".concat(level, \" id=\\\"\").concat(id, \"\\\">\").concat(text, \"</h\").concat(level, \">\\n\");\n      }\n\n      // ignore IDs\n      return \"<h\".concat(level, \">\").concat(text, \"</h\").concat(level, \">\\n\");\n    }\n  }, {\n    key: \"hr\",\n    value: function hr() {\n      return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    }\n  }, {\n    key: \"list\",\n    value: function list(body, ordered, start) {\n      var type = ordered ? 'ol' : 'ul',\n        startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"listitem\",\n    value: function listitem(text) {\n      return \"<li>\".concat(text, \"</li>\\n\");\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(checked) {\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(text) {\n      return \"<p>\".concat(text, \"</p>\\n\");\n    }\n\n    /**\n     * @param {string} header\n     * @param {string} body\n     */\n  }, {\n    key: \"table\",\n    value: function table(header, body) {\n      if (body) body = \"<tbody>\".concat(body, \"</tbody>\");\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n\n    /**\n     * @param {string} content\n     */\n  }, {\n    key: \"tablerow\",\n    value: function tablerow(content) {\n      return \"<tr>\\n\".concat(content, \"</tr>\\n\");\n    }\n  }, {\n    key: \"tablecell\",\n    value: function tablecell(content, flags) {\n      var type = flags.header ? 'th' : 'td';\n      var tag = flags.align ? \"<\".concat(type, \" align=\\\"\").concat(flags.align, \"\\\">\") : \"<\".concat(type, \">\");\n      return tag + content + \"</\".concat(type, \">\\n\");\n    }\n\n    /**\n     * span level renderer\n     * @param {string} text\n     */\n  }, {\n    key: \"strong\",\n    value: function strong(text) {\n      return \"<strong>\".concat(text, \"</strong>\");\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return \"<em>\".concat(text, \"</em>\");\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return \"<code>\".concat(text, \"</code>\");\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return this.options.xhtml ? '<br/>' : '<br>';\n    }\n\n    /**\n     * @param {string} text\n     */\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return \"<del>\".concat(text, \"</del>\");\n    }\n\n    /**\n     * @param {string} href\n     * @param {string} title\n     * @param {string} text\n     */\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n      if (href === null) {\n        return text;\n      }\n      var out = '<a href=\"' + href + '\"';\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n      out += '>' + text + '</a>';\n      return out;\n    }\n\n    /**\n     * @param {string} href\n     * @param {string} title\n     * @param {string} text\n     */\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n      if (href === null) {\n        return text;\n      }\n      var out = \"<img src=\\\"\".concat(href, \"\\\" alt=\\\"\").concat(text, \"\\\"\");\n      if (title) {\n        out += \" title=\\\"\".concat(title, \"\\\"\");\n      }\n      out += this.options.xhtml ? '/>' : '>';\n      return out;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text2) {\n      return _text2;\n    }\n  }]);\n  return Renderer;\n}();\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nvar TextRenderer = /*#__PURE__*/function () {\n  function TextRenderer() {\n    _classCallCheck(this, TextRenderer);\n  }\n  _createClass(TextRenderer, [{\n    key: \"strong\",\n    value:\n    // no need for block level renderers\n    function strong(text) {\n      return text;\n    }\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return text;\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return text;\n    }\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return text;\n    }\n  }, {\n    key: \"html\",\n    value: function html(text) {\n      return text;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text3) {\n      return _text3;\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      return '' + text;\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      return '' + text;\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return '';\n    }\n  }]);\n  return TextRenderer;\n}();\n/**\n * Slugger generates header id\n */\nvar Slugger = /*#__PURE__*/function () {\n  function Slugger() {\n    _classCallCheck(this, Slugger);\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  _createClass(Slugger, [{\n    key: \"serialize\",\n    value: function serialize(value) {\n      return value.toLowerCase().trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n    }\n\n    /**\n     * Finds the next safe (unique) slug to use\n     * @param {string} originalSlug\n     * @param {boolean} isDryRun\n     */\n  }, {\n    key: \"getNextSafeSlug\",\n    value: function getNextSafeSlug(originalSlug, isDryRun) {\n      var slug = originalSlug;\n      var occurenceAccumulator = 0;\n      if (this.seen.hasOwnProperty(slug)) {\n        occurenceAccumulator = this.seen[originalSlug];\n        do {\n          occurenceAccumulator++;\n          slug = originalSlug + '-' + occurenceAccumulator;\n        } while (this.seen.hasOwnProperty(slug));\n      }\n      if (!isDryRun) {\n        this.seen[originalSlug] = occurenceAccumulator;\n        this.seen[slug] = 0;\n      }\n      return slug;\n    }\n\n    /**\n     * Convert string to unique id\n     * @param {object} [options]\n     * @param {boolean} [options.dryrun] Generates the next unique slug without\n     * updating the internal accumulator.\n     */\n  }, {\n    key: \"slug\",\n    value: function slug(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var slug = this.serialize(value);\n      return this.getNextSafeSlug(slug, options.dryrun);\n    }\n  }]);\n  return Slugger;\n}();\n/**\n * Parsing & Compiling\n */\nvar Parser = /*#__PURE__*/function () {\n  function Parser(options) {\n    _classCallCheck(this, Parser);\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  _createClass(Parser, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parse Loop\n     */\n    function parse(tokens) {\n      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var out = '',\n        i,\n        j,\n        k,\n        l2,\n        l3,\n        row,\n        cell,\n        header,\n        body,\n        token,\n        ordered,\n        start,\n        loose,\n        itemBody,\n        item,\n        checked,\n        task,\n        checkbox,\n        ret;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n\n        // Run any renderer extensions\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        switch (token.type) {\n          case 'space':\n            {\n              continue;\n            }\n          case 'hr':\n            {\n              out += this.renderer.hr();\n              continue;\n            }\n          case 'heading':\n            {\n              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n              continue;\n            }\n          case 'code':\n            {\n              out += this.renderer.code(token.text, token.lang, token.escaped);\n              continue;\n            }\n          case 'table':\n            {\n              header = '';\n\n              // header\n              cell = '';\n              l2 = token.header.length;\n              for (j = 0; j < l2; j++) {\n                cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                  header: true,\n                  align: token.align[j]\n                });\n              }\n              header += this.renderer.tablerow(cell);\n              body = '';\n              l2 = token.rows.length;\n              for (j = 0; j < l2; j++) {\n                row = token.rows[j];\n                cell = '';\n                l3 = row.length;\n                for (k = 0; k < l3; k++) {\n                  cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                    header: false,\n                    align: token.align[k]\n                  });\n                }\n                body += this.renderer.tablerow(cell);\n              }\n              out += this.renderer.table(header, body);\n              continue;\n            }\n          case 'blockquote':\n            {\n              body = this.parse(token.tokens);\n              out += this.renderer.blockquote(body);\n              continue;\n            }\n          case 'list':\n            {\n              ordered = token.ordered;\n              start = token.start;\n              loose = token.loose;\n              l2 = token.items.length;\n              body = '';\n              for (j = 0; j < l2; j++) {\n                item = token.items[j];\n                checked = item.checked;\n                task = item.task;\n                itemBody = '';\n                if (item.task) {\n                  checkbox = this.renderer.checkbox(checked);\n                  if (loose) {\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                      }\n                    } else {\n                      item.tokens.unshift({\n                        type: 'text',\n                        text: checkbox\n                      });\n                    }\n                  } else {\n                    itemBody += checkbox;\n                  }\n                }\n                itemBody += this.parse(item.tokens, loose);\n                body += this.renderer.listitem(itemBody, task, checked);\n              }\n              out += this.renderer.list(body, ordered, start);\n              continue;\n            }\n          case 'html':\n            {\n              out += this.renderer.html(token.text, token.block);\n              continue;\n            }\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(this.parseInline(token.tokens));\n              continue;\n            }\n          case 'text':\n            {\n              body = token.tokens ? this.parseInline(token.tokens) : token.text;\n              while (i + 1 < l && tokens[i + 1].type === 'text') {\n                token = tokens[++i];\n                body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n              }\n              out += top ? this.renderer.paragraph(body) : body;\n              continue;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n\n    /**\n     * Parse Inline Tokens\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, renderer) {\n      renderer = renderer || this.renderer;\n      var out = '',\n        i,\n        token,\n        ret;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n\n        // Run any renderer extensions\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n          case 'html':\n            {\n              out += renderer.html(token.text);\n              break;\n            }\n          case 'link':\n            {\n              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'image':\n            {\n              out += renderer.image(token.href, token.title, token.text);\n              break;\n            }\n          case 'strong':\n            {\n              out += renderer.strong(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'em':\n            {\n              out += renderer.em(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'codespan':\n            {\n              out += renderer.codespan(token.text);\n              break;\n            }\n          case 'br':\n            {\n              out += renderer.br();\n              break;\n            }\n          case 'del':\n            {\n              out += renderer.del(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'text':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parse(tokens);\n    }\n\n    /**\n     * Static Parse Inline Method\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parseInline(tokens);\n    }\n  }]);\n  return Parser;\n}();\nvar Hooks = /*#__PURE__*/function () {\n  function Hooks(options) {\n    _classCallCheck(this, Hooks);\n    this.options = options || defaults;\n  }\n  _createClass(Hooks, [{\n    key: \"preprocess\",\n    value:\n    /**\n     * Process markdown before marked\n     */\n    function preprocess(markdown) {\n      return markdown;\n    }\n\n    /**\n     * Process HTML after marked is finished\n     */\n  }, {\n    key: \"postprocess\",\n    value: function postprocess(html) {\n      return html;\n    }\n  }]);\n  return Hooks;\n}();\n_defineProperty(Hooks, \"passThroughHooks\", new Set(['preprocess', 'postprocess']));\nvar _parseMarkdown = /*#__PURE__*/new WeakSet();\nvar _onError = /*#__PURE__*/new WeakSet();\nvar Marked = /*#__PURE__*/function () {\n  function Marked() {\n    _classCallCheck(this, Marked);\n    _classPrivateMethodInitSpec(this, _onError);\n    _classPrivateMethodInitSpec(this, _parseMarkdown);\n    _defineProperty(this, \"defaults\", getDefaults());\n    _defineProperty(this, \"options\", this.setOptions);\n    _defineProperty(this, \"parse\", _classPrivateMethodGet(this, _parseMarkdown, _parseMarkdown2).call(this, Lexer.lex, Parser.parse));\n    _defineProperty(this, \"parseInline\", _classPrivateMethodGet(this, _parseMarkdown, _parseMarkdown2).call(this, Lexer.lexInline, Parser.parseInline));\n    _defineProperty(this, \"Parser\", Parser);\n    _defineProperty(this, \"parser\", Parser.parse);\n    _defineProperty(this, \"Renderer\", Renderer);\n    _defineProperty(this, \"TextRenderer\", TextRenderer);\n    _defineProperty(this, \"Lexer\", Lexer);\n    _defineProperty(this, \"lexer\", Lexer.lex);\n    _defineProperty(this, \"Tokenizer\", Tokenizer);\n    _defineProperty(this, \"Slugger\", Slugger);\n    _defineProperty(this, \"Hooks\", Hooks);\n    this.use.apply(this, arguments);\n  }\n  _createClass(Marked, [{\n    key: \"walkTokens\",\n    value: function walkTokens(tokens, callback) {\n      var _this3 = this;\n      var values = [];\n      var _iterator = _createForOfIteratorHelper(tokens),\n        _step;\n      try {\n        var _loop3 = function _loop3() {\n          var token = _step.value;\n          values = values.concat(callback.call(_this3, token));\n          switch (token.type) {\n            case 'table':\n              {\n                var _iterator2 = _createForOfIteratorHelper(token.header),\n                  _step2;\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var cell = _step2.value;\n                    values = values.concat(_this3.walkTokens(cell.tokens, callback));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                var _iterator3 = _createForOfIteratorHelper(token.rows),\n                  _step3;\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    var row = _step3.value;\n                    var _iterator4 = _createForOfIteratorHelper(row),\n                      _step4;\n                    try {\n                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                        var _cell = _step4.value;\n                        values = values.concat(_this3.walkTokens(_cell.tokens, callback));\n                      }\n                    } catch (err) {\n                      _iterator4.e(err);\n                    } finally {\n                      _iterator4.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n                break;\n              }\n            case 'list':\n              {\n                values = values.concat(_this3.walkTokens(token.items, callback));\n                break;\n              }\n            default:\n              {\n                if (_this3.defaults.extensions && _this3.defaults.extensions.childTokens && _this3.defaults.extensions.childTokens[token.type]) {\n                  // Walk any extensions\n                  _this3.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n                    values = values.concat(_this3.walkTokens(token[childTokens], callback));\n                  });\n                } else if (token.tokens) {\n                  values = values.concat(_this3.walkTokens(token.tokens, callback));\n                }\n              }\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop3();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return values;\n    }\n  }, {\n    key: \"use\",\n    value: function use() {\n      var _this4 = this;\n      var extensions = this.defaults.extensions || {\n        renderers: {},\n        childTokens: {}\n      };\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.forEach(function (pack) {\n        // copy options to new object\n        var opts = _objectSpread({}, pack);\n\n        // set async to true if it was set to true before\n        opts.async = _this4.defaults.async || opts.async || false;\n\n        // ==-- Parse \"addon\" extensions --== //\n        if (pack.extensions) {\n          pack.extensions.forEach(function (ext) {\n            if (!ext.name) {\n              throw new Error('extension name required');\n            }\n            if (ext.renderer) {\n              // Renderer extensions\n              var prevRenderer = extensions.renderers[ext.name];\n              if (prevRenderer) {\n                // Replace extension with func to run new extension but fall back if false\n                extensions.renderers[ext.name] = function () {\n                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                    args[_key2] = arguments[_key2];\n                  }\n                  var ret = ext.renderer.apply(this, args);\n                  if (ret === false) {\n                    ret = prevRenderer.apply(this, args);\n                  }\n                  return ret;\n                };\n              } else {\n                extensions.renderers[ext.name] = ext.renderer;\n              }\n            }\n            if (ext.tokenizer) {\n              // Tokenizer Extensions\n              if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n                throw new Error(\"extension level must be 'block' or 'inline'\");\n              }\n              if (extensions[ext.level]) {\n                extensions[ext.level].unshift(ext.tokenizer);\n              } else {\n                extensions[ext.level] = [ext.tokenizer];\n              }\n              if (ext.start) {\n                // Function to check for start of token\n                if (ext.level === 'block') {\n                  if (extensions.startBlock) {\n                    extensions.startBlock.push(ext.start);\n                  } else {\n                    extensions.startBlock = [ext.start];\n                  }\n                } else if (ext.level === 'inline') {\n                  if (extensions.startInline) {\n                    extensions.startInline.push(ext.start);\n                  } else {\n                    extensions.startInline = [ext.start];\n                  }\n                }\n              }\n            }\n            if (ext.childTokens) {\n              // Child tokens to be visited by walkTokens\n              extensions.childTokens[ext.name] = ext.childTokens;\n            }\n          });\n          opts.extensions = extensions;\n        }\n\n        // ==-- Parse \"overwrite\" extensions --== //\n        if (pack.renderer) {\n          var renderer = _this4.defaults.renderer || new Renderer(_this4.defaults);\n          var _loop4 = function _loop4(prop) {\n            var prevRenderer = renderer[prop];\n            // Replace renderer with func to run extension, but fall back if false\n            renderer[prop] = function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n              var ret = pack.renderer[prop].apply(renderer, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(renderer, args);\n              }\n              return ret;\n            };\n          };\n          for (var prop in pack.renderer) {\n            _loop4(prop);\n          }\n          opts.renderer = renderer;\n        }\n        if (pack.tokenizer) {\n          var tokenizer = _this4.defaults.tokenizer || new Tokenizer(_this4.defaults);\n          var _loop5 = function _loop5(_prop) {\n            var prevTokenizer = tokenizer[_prop];\n            // Replace tokenizer with func to run extension, but fall back if false\n            tokenizer[_prop] = function () {\n              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                args[_key4] = arguments[_key4];\n              }\n              var ret = pack.tokenizer[_prop].apply(tokenizer, args);\n              if (ret === false) {\n                ret = prevTokenizer.apply(tokenizer, args);\n              }\n              return ret;\n            };\n          };\n          for (var _prop in pack.tokenizer) {\n            _loop5(_prop);\n          }\n          opts.tokenizer = tokenizer;\n        }\n\n        // ==-- Parse Hooks extensions --== //\n        if (pack.hooks) {\n          var hooks = _this4.defaults.hooks || new Hooks();\n          var _loop6 = function _loop6(_prop2) {\n            var prevHook = hooks[_prop2];\n            if (Hooks.passThroughHooks.has(_prop2)) {\n              hooks[_prop2] = function (arg) {\n                if (_this4.defaults.async) {\n                  return Promise.resolve(pack.hooks[_prop2].call(hooks, arg)).then(function (ret) {\n                    return prevHook.call(hooks, ret);\n                  });\n                }\n                var ret = pack.hooks[_prop2].call(hooks, arg);\n                return prevHook.call(hooks, ret);\n              };\n            } else {\n              hooks[_prop2] = function () {\n                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                  args[_key5] = arguments[_key5];\n                }\n                var ret = pack.hooks[_prop2].apply(hooks, args);\n                if (ret === false) {\n                  ret = prevHook.apply(hooks, args);\n                }\n                return ret;\n              };\n            }\n          };\n          for (var _prop2 in pack.hooks) {\n            _loop6(_prop2);\n          }\n          opts.hooks = hooks;\n        }\n\n        // ==-- Parse WalkTokens extensions --== //\n        if (pack.walkTokens) {\n          var _walkTokens = _this4.defaults.walkTokens;\n          opts.walkTokens = function (token) {\n            var values = [];\n            values.push(pack.walkTokens.call(this, token));\n            if (_walkTokens) {\n              values = values.concat(_walkTokens.call(this, token));\n            }\n            return values;\n          };\n        }\n        _this4.defaults = _objectSpread(_objectSpread({}, _this4.defaults), opts);\n      });\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(opt) {\n      this.defaults = _objectSpread(_objectSpread({}, this.defaults), opt);\n      return this;\n    }\n  }]);\n  return Marked;\n}();\nfunction _parseMarkdown2(lexer, parser) {\n  var _this5 = this;\n  return function (src, opt, callback) {\n    if (typeof opt === 'function') {\n      callback = opt;\n      opt = null;\n    }\n    var origOpt = _objectSpread({}, opt);\n    opt = _objectSpread(_objectSpread({}, _this5.defaults), origOpt);\n    var throwError = _classPrivateMethodGet(_this5, _onError, _onError2).call(_this5, opt.silent, opt.async, callback);\n\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      return throwError(new Error('marked(): input parameter is undefined or null'));\n    }\n    if (typeof src !== 'string') {\n      return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n    }\n    checkDeprecations(opt, callback);\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n    if (callback) {\n      var highlight = opt.highlight;\n      var tokens;\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        tokens = lexer(src, opt);\n      } catch (e) {\n        return throwError(e);\n      }\n      var done = function done(err) {\n        var out;\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              _this5.walkTokens(tokens, opt.walkTokens);\n            }\n            out = parser(tokens, opt);\n            if (opt.hooks) {\n              out = opt.hooks.postprocess(out);\n            }\n          } catch (e) {\n            err = e;\n          }\n        }\n        opt.highlight = highlight;\n        return err ? throwError(err) : callback(null, out);\n      };\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n      delete opt.highlight;\n      if (!tokens.length) return done();\n      var pending = 0;\n      _this5.walkTokens(tokens, function (token) {\n        if (token.type === 'code') {\n          pending++;\n          setTimeout(function () {\n            highlight(token.text, token.lang, function (err, code) {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n      if (pending === 0) {\n        done();\n      }\n      return;\n    }\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(function (src) {\n        return lexer(src, opt);\n      }).then(function (tokens) {\n        return opt.walkTokens ? Promise.all(_this5.walkTokens(tokens, opt.walkTokens)).then(function () {\n          return tokens;\n        }) : tokens;\n      }).then(function (tokens) {\n        return parser(tokens, opt);\n      }).then(function (html) {\n        return opt.hooks ? opt.hooks.postprocess(html) : html;\n      }).catch(throwError);\n    }\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      var _tokens = lexer(src, opt);\n      if (opt.walkTokens) {\n        _this5.walkTokens(_tokens, opt.walkTokens);\n      }\n      var html = parser(_tokens, opt);\n      if (opt.hooks) {\n        html = opt.hooks.postprocess(html);\n      }\n      return html;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n}\nfunction _onError2(silent, async, callback) {\n  return function (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/this.';\n    if (silent) {\n      var msg = '<p>An error occurred:</p><pre>' + _escape(e.message + '', true) + '</pre>';\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      if (callback) {\n        callback(null, msg);\n        return;\n      }\n      return msg;\n    }\n    if (async) {\n      return Promise.reject(e);\n    }\n    if (callback) {\n      callback(e);\n      return;\n    }\n    throw e;\n  };\n}\nvar markedInstance = new Marked(defaults);\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  return markedInstance.parse(src, opt, callback);\n}\n\n/**\n * Options\n */\n\nmarked.options = marked.setOptions = function (opt) {\n  markedInstance.setOptions(opt);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function () {\n  markedInstance.use.apply(markedInstance, arguments);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = Parser.parse;\nvar lexer = Lexer.lex;\nexport { Hooks, Lexer, Marked, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","hooks","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkDeprecations","callback","console","warn","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","_matchIndentInNode","_slicedToArray","indentInNode","join","Tokenizer","options","_classCallCheck","_createClass","key","value","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","concat","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","arguments","undefined","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","_objectSpread","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","Object","create","inlineQueue","lex","next","_this","leading","tabs","lastToken","cutSrc","lastParagraphClipped","_loop","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","_ret","_this2","keepPrevChar","keys","includes","lastIndexOf","_loop2","startInline","_ret2","get","lexInline","Renderer","infostring","quote","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","hasOwnProperty","dryrun","Parser","textRenderer","parse","l2","l3","cell","itemBody","ret","renderers","parser","parseInline","unshift","Hooks","preprocess","markdown","postprocess","_defineProperty","Set","_parseMarkdown","WeakSet","_onError","Marked","_classPrivateMethodInitSpec","setOptions","_classPrivateMethodGet","_parseMarkdown2","use","apply","_this3","values","_iterator","_createForOfIteratorHelper","_step","_loop3","_iterator2","_step2","s","done","err","f","_iterator3","_step3","_iterator4","_step4","childTokens","_this4","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","_key2","_loop4","prop","_len3","_key3","_loop5","_prop","prevTokenizer","_len4","_key4","_loop6","_prop2","prevHook","passThroughHooks","has","arg","Promise","resolve","then","_len5","_key5","_this5","origOpt","throwError","_onError2","prototype","pending","setTimeout","all","catch","message","msg","reject","markedInstance","marked"],"sources":["/Users/leander/Documents/projects/markdown-previewer/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v5.1.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.lheading = edit(block.lheading)\n  .replace(/bull/g, block.bullet) // lists can interrupt\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = edit(inline._escapes, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html, block) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\nclass Hooks {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n}\n\nclass Marked {\n  defaults = getDefaults();\n  options = this.setOptions;\n\n  parse = this.#parseMarkdown(Lexer.lex, Parser.parse);\n  parseInline = this.#parseMarkdown(Lexer.lexInline, Parser.parseInline);\n\n  Parser = Parser;\n  parser = Parser.parse;\n  Renderer = Renderer;\n  TextRenderer = TextRenderer;\n  Lexer = Lexer;\n  lexer = Lexer.lex;\n  Tokenizer = Tokenizer;\n  Slugger = Slugger;\n  Hooks = Hooks;\n\n  constructor(...args) {\n    this.use(...args);\n  }\n\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          for (const cell of token.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          values = values.concat(this.walkTokens(token.items, callback));\n          break;\n        }\n        default: {\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n              values = values.concat(this.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(this.walkTokens(token.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args) {\n    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack };\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if (ext.renderer) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (ext.tokenizer) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[prop] = (...args) => {\n            let ret = pack.renderer[prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          // Replace tokenizer with func to run extension, but fall back if false\n          tokenizer[prop] = (...args) => {\n            let ret = pack.tokenizer[prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (Hooks.passThroughHooks.has(prop)) {\n            hooks[prop] = (arg) => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = pack.hooks[prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args) => {\n              let ret = pack.hooks[prop].apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        opts.walkTokens = function(token) {\n          let values = [];\n          values.push(pack.walkTokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  #parseMarkdown(lexer, parser) {\n    return (src, opt, callback) => {\n      if (typeof opt === 'function') {\n        callback = opt;\n        opt = null;\n      }\n\n      const origOpt = { ...opt };\n      opt = { ...this.defaults, ...origOpt };\n      const throwError = this.#onError(opt.silent, opt.async, callback);\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      checkDeprecations(opt, callback);\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (callback) {\n        const highlight = opt.highlight;\n        let tokens;\n\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          tokens = lexer(src, opt);\n        } catch (e) {\n          return throwError(e);\n        }\n\n        const done = (err) => {\n          let out;\n\n          if (!err) {\n            try {\n              if (opt.walkTokens) {\n                this.walkTokens(tokens, opt.walkTokens);\n              }\n              out = parser(tokens, opt);\n              if (opt.hooks) {\n                out = opt.hooks.postprocess(out);\n              }\n            } catch (e) {\n              err = e;\n            }\n          }\n\n          opt.highlight = highlight;\n\n          return err\n            ? throwError(err)\n            : callback(null, out);\n        };\n\n        if (!highlight || highlight.length < 3) {\n          return done();\n        }\n\n        delete opt.highlight;\n\n        if (!tokens.length) return done();\n\n        let pending = 0;\n        this.walkTokens(tokens, (token) => {\n          if (token.type === 'code') {\n            pending++;\n            setTimeout(() => {\n              highlight(token.text, token.lang, (err, code) => {\n                if (err) {\n                  return done(err);\n                }\n                if (code != null && code !== token.text) {\n                  token.text = code;\n                  token.escaped = true;\n                }\n\n                pending--;\n                if (pending === 0) {\n                  done();\n                }\n              });\n            }, 0);\n          }\n        });\n\n        if (pending === 0) {\n          done();\n        }\n\n        return;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        const tokens = lexer(src, opt);\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n  }\n\n  #onError(silent, async, callback) {\n    return (e) => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/this.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        if (callback) {\n          callback(null, msg);\n          return;\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      if (callback) {\n        callback(e);\n        return;\n      }\n      throw e;\n    };\n  }\n}\n\nconst markedInstance = new Marked(defaults);\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  return markedInstance.parse(src, opt, callback);\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  markedInstance.setOptions(opt);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Hooks, Lexer, Marked, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}